openapi: 3.0.3
info:
  title: PCO Services - OpenAPI 3.0
  description: |-
    Description
  termsOfService: http://pco.com/tos
  contact:
    email: me@me.com
  license:
    name: Apache 2.0
    url: http://example.com
  version: 2018-11-01
externalDocs:
  description: PCO Developer API Explorer
  url: https://api.planningcenteronline.com/explorer/services/v2
servers:
  - url: https://api.planningcenteronline.com/services/v2
tags:
  - name: songs
    description: Songs
    externalDocs:
      description: Find out more
      url: https://api.planningcenteronline.com/explorer/services/v2/songs
paths:
  /songs:
    get:
      tags:
        - songs
      summary: Get songs
      description: Get songs
      operationId: getSongs
      parameters:
        - in: query
          name: where
          schema:
            $ref: '#/components/schemas/SongQuery'
          description: query parameters
          explode: true
          style: deepObject
        - $ref: "#/components/parameters/listOrderParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/perPageParam"
      responses:
        '200':
          $ref: '#/components/responses/GetSongs200Response'
        '400':
          description: Bad request
        '404':
          description: Not found
      security:
        - basic_auth: []
        - pestore_auth:
            - write:songs
            - read:songs
    # post:
    #   tags:
    #     - songs
    #   summary: Add a new song
    #   description: Add a new song
    #   operationId: addSong
    #   requestBody:
    #     description: Create a song
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/Song'
    #     required: true
    #   responses:
    #     '200':
    #       description: Successful operation
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/SongResponse'
    #     '405':
    #       description: Invalid input
    #   security:
    #     - basic_auth: []
    #     - petstore_auth:
    #         - write:songs
    #         - read:songs
  /songs/{songId}:
    get:
      tags:
        - songs
      summary: Get song by ID
      description: Returns a single song
      operationId: getSong
      parameters:
        - $ref: '#/components/parameters/songIdParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - basic_auth: []
        - petstore_auth:
            - write:songs
            - read:songs
    # patch:
    #   tags:
    #     - songs
    #   summary: Updates a song
    #   description: ''
    #   operationId: updateSong
    #   parameters:
    #    - $ref: '#/components/parameters/songIdParam'
    #   responses:
    #     '200':
    #       description: successful operation
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/SongResponse'
    #     '405':
    #       description: Invalid input
    #   security:
    #     - petstore_auth:
    #         - write:songs
    #         - read:songs
    # delete:
    #   tags: [songs]
    #   summary: Deletes a song
    #   description: delete a song
    #   operationId: deleteSong
    #   parameters:
    #    - $ref: '#/components/parameters/songIdParam'
    #   responses:
    #     '400':
    #       description: Invalid song value
    #   security:
    #     - petstore_auth:
    #         - write:songs
    #         - read:songs
  /songs/{songId}/arrangements:
    get:
      tags: [songs]
      operationId: getArrangements
      parameters:
        - $ref: '#/components/parameters/songIdParam'
        - name: include
          in: query
          schema:
            type: array
            items: 
              type: string
              enum:
                - keys
                - sections
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/perPageParam"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrangementListResponse'
      security:
        - basic_auth: []
  #   post:
  #     tags: [songs]
  #     operationId: createArrangement
  #     parameters:
  #        - $ref: '#/components/parameters/songIdParam'
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Arrangement'
  /songs/{songId}/arrangements/{arrangementId}:
    get:
      tags: [songs]
      operationId: getArrangement
      parameters:
        - $ref: '#/components/parameters/songIdParam'
        - $ref: '#/components/parameters/arrangementIdParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrangementResponse'
      security:
        - basic_auth: []
  /songs/{songId}/arrangements/{arrangementId}/sections:
    get:
      tags: [songs]
      operationId: getArrangementSections
      parameters:
        - $ref: '#/components/parameters/songIdParam'
        - $ref: '#/components/parameters/arrangementIdParam'
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/perPageParam"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrangementSectionsResponse'
      security:
        - basic_auth: []
  #   patch:
  #     tags: [songs]
  #     operationId: updateArrangement
  #     parameters:
  #       - $ref: '#/components/parameters/songIdParam'
  #       - name: ArrangementId
  #         in: path
  #         description: Arrangement id to delete
  #         required: true
  #         schema:
  #           type: integer
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Arrangement'
  #   delete:
  #     tags: [songs]
  #     operationId: deleteArrangement
  #     parameters:
  #       - $ref: '#/components/parameters/songIdParam'
  #       - name: ArrangementId
  #         in: path
  #         description: Arrangement id to delete
  #         required: true
  #         schema:
  #           type: integer
  #     responses:
  #       '200':
  #         description: successful operation
  #         # content:
  #           # application?/json:
  #             # schema:
  #             #   $ref: '#/components/schemas/Song'
components:
  schemas:
    BaseListResponse:
      type: object
      required:
        - links
        - included
        - meta
      properties:
        links:
          $ref: '#/components/schemas/Links'
        included:
          type: array
          items:
            type: object
        meta:
          $ref: '#/components/schemas/ListMeta'
    BaseObjectResponse:
      type: object
      required:
        - included
        - meta
      properties:
        included:
          type: array
          items:
            type: object
        meta:
          $ref: '#/components/schemas/ObjectMeta'
    BaseDataObject:
      required:
        - type
        - id
      type: object
      properties:
        type:
          type: string
          example: "Song"
        id:
          type: string
          example: "1"
        links:
          $ref: '#/components/schemas/Links'
        relationships:
          $ref: '#/components/schemas/Relationships'
    Links:
      type: object
      required:
        - self
      properties:
        self:
          type: string
        arrangements:
          type: string
        assign_tags:
          type: string
        attachments:
          type: string
        last_scheduled_item:
          type: string
        song_schedules:
          type: string
        tags:
          type: string
      additionalProperties:
        type: string
    Relationships:
      type: object
      properties:
        updated_by:
          $ref: '#/components/schemas/RelationshipObject'
        created_by:
          $ref: '#/components/schemas/RelationshipObject'
        song:
          $ref: '#/components/schemas/RelationshipObject'
      additionalProperties:
          $ref: '#/components/schemas/RelationshipObject'
    RelationshipObject:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          properties:
            type:
              type: string
            id:
              type: string
    ListMeta:
      type: object
      required:
        - total_count
        - count
        - parent
      properties:
        total_count:
          type: integer
        count:
          type: integer
        next:
          type: object
          properties:
            offset:
              type: integer
        can_order_by:
          type: array
          items:
            type: string
        can_query_by:
          type: array
          items:
            type: string
        can_include:
          type: array
          items:
            type: string
        parent:
          $ref: '#/components/schemas/MetaParent'
    ObjectMeta:
      type: object
      required:
        - parent
      properties:
        parent:
          $ref: '#/components/schemas/MetaParent'
    MetaParent:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
    SongListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseListResponse'
        - type: object
          required:
             - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Song'
    SongResponse:
      allOf:
        - $ref: '#/components/schemas/BaseObjectResponse'
        - type: object
          required:
             - data
          properties:
            data:
              $ref: '#/components/schemas/Song'
    Song:
      allOf:
        - $ref: '#/components/schemas/BaseDataObject'
        - type: object
          required:
            - attributes
          properties:
            attributes:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  example: "Hosanna"
                created_at:
                  type: string
                  format: date-time
                  example: "2000-01-01T12:00:00Z"
                updated_at:
                  type: string
                  format: date-time
                  example: "2000-01-01T12:00:00Z"
                admin:
                  type: string
                author:
                  type: string
                copyright:
                  type: string
                hidden:
                  type: boolean
                notes:
                  type: string
                themes:
                  type: string
                last_scheduled_short_dates:
                  type: string
                last_scheduled_at:
                  type: string
                  format: date-time
                  example: "2000-01-01T12:00:00Z"
                ccli_number:
                  type: integer
    SongQuery:
      type: object
      properties:
        arrangement_name:
          type: string
        arrangement_rehearsal_mix_id:
          type: string
        arrangement_tag_group_ids:
          type: string
        arrangement_tag_ids:
          type: string
        author:
          type: string
        bpm_max:
          type: string
        bpm_min:
          type: string
        ccli_number:
          type: string
        ending_key:
          type: string
        ending_key_minor:
          type: string
        folder_id:
          type: string
        hidden:
          type: string
        key_name:
          type: string
        lyrics:
          type: string
        meter:
          type: string
        service_type_id:
          type: string
        song_tag_group_ids:
          type: string
        song_tag_ids:
          type: string
        starting_key:
          type: string
        starting_key_minor:
          type: string
        themes:
          type: string
        title:
          type: string
    ArrangementListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseListResponse'
        - type: object
          required:
             - data
          properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Arrangement'
    ArrangementResponse:
      allOf:
        - $ref: '#/components/schemas/BaseObjectResponse'
        - type: object
          required:
             - data
          properties:
            data:
              $ref: '#/components/schemas/Arrangement'
    Arrangement:
      allOf:
        - $ref: '#/components/schemas/BaseDataObject'
        - type: object
          required:
            - attributes
          properties:
            attributes:
              type: object
              required:
                - name
              properties:
                bpm:
                  type: number
                  format: float
                created_at:
                  type: string
                  format: date-time
                  example: "2000-01-01T12:00:00Z"
                has_chords:
                  type: boolean
                length:
                  type: integer
                meter:
                  type: string
                  enum:
                    - 2/2
                    - 2/4
                    - 3/4
                    - 3/4
                    - 4/4
                    - 5/4
                    - 6/4
                    - 3/8
                    - 6/8
                    - 7/8
                    - 9/8
                    - 12/8
                name:
                  type: string
                  example: Default Arrangement
                notes:
                  type: string
                print_margin:
                  type: string
                  enum:
                   - 0.0in
                   - 0.25in
                   - 0.5in
                   - 0.75in
                   - 1.0in
                print_orientation:
                  type: string
                  enum:
                    - Portrait
                    - Landscape
                print_page_size:
                  type: string
                  enum:
                    - Widescreen (16x9)
                    - Fullscreen (4x3)
                    - A4
                    - Letter
                    - Legal
                    - 11x17
                updated_at:
                  type: string
                  format: date-time
                  example: "2000-01-01T12:00:00Z"
                chord_chart:
                  type: string
                chord_chart_font:
                  type: string
                chord_chart_key:
                  type: string
                chord_chart_columns:
                  type: integer
                chord_chart_font_size:
                  type: integer
                has_chord_chart:
                  type: boolean
                lyrics_enabled:
                  type: boolean
                number_chart_enabled:
                  type: boolean
                numeral_chart_enabled:
                  type: boolean
                sequence:
                  type: array
                  items:
                    type: string
                sequence_short:
                  type: array
                  items:
                    type: string
                sequence_full:
                  type: array
                  items:
                    type: object
                    properties:
                      label:
                        type: string
                      number:
                        type: integer
                      id:
                        type: integer
                chord_chart_chord_color:
                  type: integer
                archived_at:
                  type: string
                  format: date-time
                  example: "2000-01-01T12:00:00Z"
                lyrics:
                  type: string
    ArrangementSectionsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseObjectResponse'
        - type: object
          required:
             - data
          properties:
            data:
              $ref: '#/components/schemas/ArrangementSections'
    ArrangementSections:
      allOf:
        - $ref: '#/components/schemas/BaseDataObject'
        - type: object
          required:
            - attributes
          properties:
            attributes:
              type: object
              required:
                - sections
              properties:
                sections:
                  type: array
                  items:
                    type: object
                    required:
                      - label
                      - lyrics
                    properties:
                      label:
                        type: string
                      lyrics:
                        type: string
                      breaks_at:
                        type: string
  # requestBodies:
  #   Song:
  #     description: Song object
  #     content:
  #       application/json:
  #         schema:
  #           $ref: '#/components/schemas/Song'
  responses:
    GetSongs200Response:
      description: Song list
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SongListResponse'
  parameters:
    listOrderParam:
      in: query
      name: order
      schema:
        type: string
        enum:
          - none
          - title
          - created_at
          - updated_at
          - last_scheduled_at
    offsetParam:
      in: query
      name: offset
      schema:
        type: integer
    perPageParam:
      in: query
      name: per_page
      schema:
        type: integer
    songIdParam:
      name: songId
      in: path
      description: Song ID
      required: true
      schema:
        type: string
    arrangementIdParam:
      name: arrangementId
      in: path
      description: Arrangement ID
      required: true
      schema:
        type: string
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    basic_auth:
      type: http
      scheme: basic
    api_key:
      type: apiKey
      name: api_key
      in: header